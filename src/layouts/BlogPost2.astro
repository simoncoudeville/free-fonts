---
import BaseLayout from "../layouts/BaseLayout.astro";
import BackLink from "../components/BackLink.astro";
import Header from "../components/Header.astro";
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

type Props = CollectionEntry<"blog">["data"];

const {
  title,
  foundry,
  foundryLink,
  downloadLink,
  gallery,
  license,
  styles,
  variable,
} = Astro.props;

import { getCollection } from "astro:content";

const posts = (
  await getCollection("blog", ({ data }) => {
    return data.draft !== true;
  })
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const amount = posts.length;

const tags = [...new Set(posts.map((post) => post.data.tags).flat())];
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the first "/"
---

<BaseLayout title={title}>
  <main class="detail">
    <div class="detail__header">
      <BackLink />
      <h1>
        {title}
      </h1>
    </div>
    <div class="detail__intro">
      <!-- <h1 class="detail__img">
        <Fragment set:html={svg} />
      </h1> -->
      <div class="detail__img">
        <div class="gallery">
          <div class="gallery__container">
            {
              gallery.map((item) => (
                <div class="gallery__item">
                  <Image class="gallery__img" src={item} alt={title} />
                </div>
              ))
            }
          </div>
          <div class="gallery__ui">
            <div class="gallery__buttons" role="tablist"></div>
            <div class="gallery__amount"></div>
          </div>
        </div>
      </div>
      <!-- <div class="detail__header">
        <h1 class="detail__title font-size-l">{title}</h1>
      </div> -->
    </div>
    <div class="detail__body">
      <div class="flow max-width-m">
        <!-- <h2 class="color-meta">Info</h2> -->
        <slot />
        <p>
          <a
            class="download"
            href={downloadLink}
            target="_blank"
            rel="noopener noreferrer"
          >
            Get it here
          </a>
        </p>
      </div>
      <div class="flow">
        <div>
          <h2 class="color-meta">Designed By</h2>
          <p>
            <a href={foundryLink}>{foundry}</a>
          </p>
        </div>
        <div>
          <h2 class="color-meta">Styles</h2>
          <p>
            {styles}&nbsp;{variable ? "+ variable" : ""}
          </p>
        </div>
        <div>
          <h2 class="color-meta">Licence</h2>
          <p>
            {license}
          </p>
        </div>
        <!-- <dl>
          <dt>Designed By</dt>
          <dd><a href={foundryLink}>{foundry}</a></dd>
          <dt>Image credit</dt>
          <dd>
            <a href={downloadLink} target="_blank" rel="noopener noreferrer">
              Download
            </a>
          </dd>
        </dl> -->
        <!-- <p class="color-meta">
          Image courtesy of
          <a href={downloadLink} target="_blank" rel="noopener noreferrer">
            {credit}
          </a>
        </p> -->
      </div>
    </div>
  </main>
</BaseLayout>

<style is:global>
  .gallery {
    display: flex;
    flex-direction: column;
    gap: var(--global-space-m);
    margin: calc(var(--global-page-padding) * -1);
  }

  .gallery__container {
    display: flex;
    gap: var(--global-page-padding);
    padding: var(--global-page-padding);
    scroll-snap-type: x mandatory;
    scroll-padding: 0 var(--global-page-padding);
    overflow: visible hidden;
    /* flex-direction: column; */
    /* gap: var(--global-space-m); */
  }

  .gallery__item {
    /* display: none; */
    flex-basis: 100%;
    flex-shrink: 0;
    scroll-snap-align: start;
  }

  /* .gallery__item {
    display: none;
  } */

  /* .gallery__item:first-child {
    display: block;
  } */

  /* .gallery__item.active {
    display: block;
  }

  .gallery__item.inactive {
    display: none;
  } */

  .gallery__img {
    width: 100%;
    height: auto;
  }

  .gallery__buttons {
    display: flex;
    gap: var(--global-space-s);
  }

  .gallery__amount {
    font-feature-settings: "tnum";
  }

  .gallery__button {
    flex-basis: 100%;
    flex-grow: 1;
    height: 1px;
    background-color: hotpink;
  }
</style>

<script>
  const initGallery = () => {
    const gallery = document.querySelector(".gallery");
    const galleryContainer = document.querySelector(".gallery__container");
    const galleryItems = document.querySelectorAll(".gallery__item");
    const galleryAmount = document.querySelector(".gallery__amount");
    const buttons = document.querySelector(".gallery__buttons");

    let current = 0;
    let next = 1;
    let prev = galleryItems.length - 1;

    const nextSlide = () => {
      galleryItems[current].classList.remove("active");
      galleryItems[current].classList.add("inactive");
      galleryItems[next].classList.add("active");
      galleryItems[next].classList.remove("inactive");
      current = next;
      next = current + 1;
      prev = current - 1;
      if (next === galleryItems.length) {
        next = 0;
      }
      if (prev === -1) {
        prev = galleryItems.length - 1;
      }
    };

    const prevSlide = () => {
      galleryItems[current].classList.remove("active");
      galleryItems[current].classList.add("inactive");
      galleryItems[prev].classList.add("active");
      current = prev;
      next = current + 1;
      prev = current - 1;
      if (next === galleryItems.length) {
        next = 0;
      }
      if (prev === -1) {
        prev = galleryItems.length - 1;
      }
    };

    galleryItems.forEach((item, index) => {
      if (index === 0) {
        item.classList.add("active");
      }

      // add a button to the gallery element for each item
      const button = document.createElement("button");
      button.classList.add("button-reset");
      button.classList.add("gallery__button");
      button.setAttribute("aria-label", `Show image ${index + 1}`);
      button.setAttribute("aria-controls", `image-${index + 1}`);
      button.setAttribute("aria-selected", "false");
      button.setAttribute("type", "button");
      button.setAttribute("id", `button-${index + 1}`);
      button.innerHTML = `<span class="sr-only">Show image ${index + 1}</span>`;

      buttons.appendChild(button);

      // add a click event to each button
      button.addEventListener("click", () => {
        galleryItems.forEach((item) => {
          item.classList.remove("active");
          item.classList.add("inactive");
        });
        galleryItems[index].classList.add("active");
        galleryItems[index].classList.remove("inactive");
        current = index;
        next = current + 1;
        prev = current - 1;
        GalleryAmount();
      });
    });

    // make a function to add and change the amount of images to the gallery in the form of 1/3 to use in nextSlide and prevSlide
    const GalleryAmount = () => {
      galleryAmount.innerHTML = `${current + 1}/${galleryItems.length}`;
    };

    GalleryAmount();

    // update gallery amount when nextSlide or prevSlide is called

    galleryContainer.addEventListener("click", () => {
      GalleryAmount();
      nextSlide();
    });
  };
  // initGallery();

  document.addEventListener("astro:after-swap", () => {
    // initGallery();
  });
</script>
