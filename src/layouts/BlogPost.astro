---
import BaseLayout from "../layouts/BaseLayout.astro";
import BackLink from "../components/BackLink.astro";
import Thumb from "../components/Thumb.astro";
import type { CollectionEntry } from "astro:content";
import opentype from "opentype.js";

import fs from "node:fs";
import path from "node:path";

type Props = CollectionEntry<"blog">["data"];

const {
  title,
  description,
  foundry,
  foundryLink,
  downloadLink,
  variableFont,
  staticFont,
  license,
  weights,
  italic,
  variable,
  pubDate,
} = Astro.props;

// get the slug from the url
const slug = Astro.params.slug;

const fontPath = path.resolve(`src/fonts/${slug}/${variableFont}`);
const buffer = fs.readFileSync(fontPath).buffer;
const fontFile = opentype.parse(await buffer);
const fontData = fontFile.tables;
const tableNames = Object.keys(fontData);
// get all the keys with the name 'tag' from the gsub table and put the values in a new array
const fontFeatures = fontData["gsub"].features.map((feature) => feature.tag);

// sometimes the fontFeatures array contains values from ss01 to ss20, replace them with a string ss01-ss20 and do the same for cv01 to cv20
let ssAmount = fontFeatures.filter((feature) => feature.includes("ss")).length;
let cvAmount = fontFeatures.filter((feature) => feature.includes("cv")).length;

// rewrite ssAmount and cvAmount as for example 08 if it's 8
ssAmount = ssAmount < 10 ? `0${ssAmount}` : ssAmount;
cvAmount = cvAmount < 10 ? `0${cvAmount}` : cvAmount;

// now replace the cv values with one string cv01-cv20 based on the amount of cv values
if (cvAmount > 0) {
  // add the new string to the array at the index of the first cv value
  fontFeatures.splice(
    fontFeatures.indexOf("cv01"),
    cvAmount,
    `cv01 -> cv${cvAmount}`
  );
}

//now replace the ss values with one string ss01-ss20 based on the amount of ss values
if (ssAmount > 0) {
  // add the new string to the array at the index of the first ss value
  fontFeatures.splice(
    fontFeatures.indexOf("ss01"),
    ssAmount,
    `ss01 -> ss${ssAmount}`
  );
}

// get all the unique values from the fontFeatures array (some values are duplicates...)
let uniqueFeatures = [...new Set(fontFeatures)];

const fvarArray = fontData["fvar"].axes;
// const fontAxes = fvarArray.map((axe) => axe.tag);

// get all the axes from the fvar with their tag, minValue and maxValue
const fontAxes = fvarArray.map((axe) => {
  return {
    tag: axe.tag,
    minValue: axe.minValue,
    maxValue: axe.maxValue,
  };
});

//console.log(Object.keys(fontFile));
//console.log(fontFile.numGlyphs);
// remove the https:// from the foundry link
const downloadLinkShort = downloadLink.replace(/(^\w+:|^)\/\//, "");

const date = new Date(pubDate).toLocaleDateString("en-UK", {
  year: "numeric",
  month: "short",
  day: "numeric",
});
---

<style is:global>
  .gallery {
    /* display: flex;
    align-items: center;
    justify-content: center; */
    /* flex-direction: column; */
    gap: var(--global-space-m);
  }

  .gallery__item {
    display: none;
    align-items: center;
    justify-content: center;
  }

  .gallery__item:first-child {
    display: flex;
  }

  .gallery__item.active {
    display: flex;
  }

  .gallery__item.inactive {
    display: none;
  }

  .gallery__img {
    /* width: 100%; */
    /* height: auto; */
    height: calc(100vh - var(--global-space-m) * 2);
    width: auto;
  }

  .gallery__buttons {
    display: flex;
    gap: var(--global-space-s);
  }

  .gallery__amount {
    font-feature-settings: "tnum";
  }

  .gallery__button {
    flex-basis: 100%;
    flex-grow: 1;
    height: 1px;
    background-color: hotpink;
  }

  .svg {
    overflow: visible;
  }
</style>

<BaseLayout title={title} description={description}>
  <BackLink />
  <main class="detail">
    <header class="detail__intro">
      <h1 class="detail__img">
        <span class="sr-only">{title}</span>
        <Thumb slug={slug} title={title} font={staticFont} />
      </h1>
    </header>
    <div class="detail__body">
      <!-- get all the tableNames -->
      <!-- <ul class="list-reset">
        {tableNames.map((name) => <li class="feature">{name}</li>)}
      </ul> -->

      <dl class="table">
        <div class="table__row">
          <dt>Info</dt>
          <dd class="flow">
            <slot />
          </dd>
        </div>
        <div class="table__row">
          <dt>By</dt>
          <dd><a href={foundryLink}>{foundry}</a></dd>
        </div>
        <div class="table__row">
          <dt>Family</dt>
          <dd>
            <!--
            {styles}&nbsp;{styles === 1 ? "style" : "styles"}&nbsp;{
              variable ? "+ variable" : ""
            } -->
            {italic ? weights * 2 : weights} styles
            {weights} weights
            {italic ? " + italics" : ""}
            {variable ? " & variable" : ""}
          </dd>
        </div>
        {
          /* If variable true, show the axes from the array */
          variable && (
            <div class="table__row">
              <dt>Axes</dt>
              <dd>
                <ul class="list-reset">
                  {fontAxes.map((axe) => (
                    <li class="feature">
                      {axe.tag}:&nbsp;{axe.minValue} &lt;-&gt; {axe.maxValue}
                    </li>
                  ))}
                </ul>
              </dd>
            </div>
          )
        }
        <div class="table__row">
          <dt>Features</dt>
          <dd>
            <ul class="list-reset features">
              {
                uniqueFeatures.map((feature) => (
                  <li class="feature">{feature},&nbsp;</li>
                  // make sure the last item doesn't have a comma after it
                ))
              }
            </ul>
            {
              /*
            <ul class="list-reset features">
              {
                uniqueFeatures.map((feature) => (
                  <li class="feature">{feature.value}&nbsp;</li>
                ))
              }
            </ul>
            */
            }
          </dd>
        </div>
        <div class="table__row">
          <dt>Download</dt>
          <dd><a href={downloadLink}>{downloadLinkShort}</a></dd>
        </div>
        <div class="table__row">
          <dt>License</dt>
          <dd>{license}</dd>
        </div>
        <div class="table__row">
          <dt>Added</dt>
          <dd>{date}</dd>
        </div>
      </dl>
      {
        /* <div class="flow"> <div> <h2 class="color-meta">Designed By</h2>
        <p> <a href={foundryLink}>{foundry}</a> </p> </div> <div> <h2
        class="color-meta">Family</h2> <p> {styles}&nbsp;{styles === 1 ? "style"
        : "styles"}&nbsp;{ variable ? "+ variable" : " static" } </p> </div>
        <div> <h2 class="color-meta">Licence</h2> <p> {license} </p> </div>
        <div> <h2 class="color-meta">{featureAmount} features</h2> <ul
        class="list-reset features"> { features.map((feature) => ( <li
        class="features__item">{feature}</li> )) } </ul> </div> </div> <div
        class="flow max-width-m"> <slot /> <p> <a class="download"
        href={downloadLink} target="_blank" rel="noopener noreferrer" > Download
        </a> </p> </div> */
      }
    </div>
  </main>
</BaseLayout>
